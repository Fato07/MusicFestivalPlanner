// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20200110163108_DbCreation")]
    partial class DbCreation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0");

            modelBuilder.Entity("Domain.Dj", b =>
                {
                    b.Property<int>("DjId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FestivalId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(128);

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(128);

                    b.Property<string>("StageName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(128);

                    b.HasKey("DjId");

                    b.HasIndex("FestivalId");

                    b.ToTable("Djs");
                });

            modelBuilder.Entity("Domain.DjSong", b =>
                {
                    b.Property<int>("DjSongId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DjId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SongId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DjSongId");

                    b.HasIndex("DjId");

                    b.HasIndex("SongId");

                    b.ToTable("DjSongs");
                });

            modelBuilder.Entity("Domain.Festival", b =>
                {
                    b.Property<int>("FestivalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FestivalName")
                        .HasColumnType("TEXT");

                    b.HasKey("FestivalId");

                    b.ToTable("Festivals");
                });

            modelBuilder.Entity("Domain.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("GenreName")
                        .HasColumnType("TEXT");

                    b.HasKey("GenreId");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("Domain.Performer", b =>
                {
                    b.Property<int>("PerformerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("PerformerName")
                        .HasColumnType("TEXT");

                    b.HasKey("PerformerId");

                    b.ToTable("Performers");
                });

            modelBuilder.Entity("Domain.PerformerSong", b =>
                {
                    b.Property<int>("PerformerSongId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("PerformerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SongId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PerformerSongId");

                    b.HasIndex("PerformerId");

                    b.HasIndex("RoleId");

                    b.HasIndex("SongId");

                    b.ToTable("PerformerSongs");
                });

            modelBuilder.Entity("Domain.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("RoleName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(128);

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Domain.Song", b =>
                {
                    b.Property<int>("SongId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Duration")
                        .HasColumnType("TEXT");

                    b.Property<int>("GenreId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("SongName")
                        .HasColumnType("TEXT");

                    b.HasKey("SongId");

                    b.HasIndex("GenreId");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("Domain.Dj", b =>
                {
                    b.HasOne("Domain.Festival", null)
                        .WithMany("FestivalDjs")
                        .HasForeignKey("FestivalId");
                });

            modelBuilder.Entity("Domain.DjSong", b =>
                {
                    b.HasOne("Domain.Dj", "Dj")
                        .WithMany()
                        .HasForeignKey("DjId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Song", "Song")
                        .WithMany("DjSongs")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.PerformerSong", b =>
                {
                    b.HasOne("Domain.Performer", "Performer")
                        .WithMany("PerformerSongs")
                        .HasForeignKey("PerformerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Role", "Role")
                        .WithMany("PerformerSongs")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Song", "Song")
                        .WithMany("PerformerSongs")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Song", b =>
                {
                    b.HasOne("Domain.Genre", "Genre")
                        .WithMany("Songs")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
